// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.5.0.0
//      Runtime Version:4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace KojackGames.Blackjack.Acceptance.Tests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.5.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Deck Of Cards")]
    public partial class DeckOfCardsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "021-DeckOfCards.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Deck Of Cards", "In order to play a game of Blackjack\r\nAs a dealer\r\nI should deal from a pack of c" +
                    "ards", GenerationTargetLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Take a card from the deck")]
        public virtual void TakeACardFromTheDeck()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Take a card from the deck", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given("I have a new deck of 52 cards");
#line 8
 testRunner.When("I take \"1\" cards");
#line 9
 testRunner.Then("I should have 51 cards left in the deck");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Take cards from an ordered deck")]
        public virtual void TakeCardsFromAnOrderedDeck()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Take cards from an ordered deck", ((string[])(null)));
#line 11
this.ScenarioSetup(scenarioInfo);
#line 12
 testRunner.Given("I have a new deck of 52 cards");
#line 13
 testRunner.And("I have taken the first card");
#line 14
 testRunner.And("that the card is a \"Ace\" of \"Clubs\"");
#line 15
 testRunner.When("I take \"3\" cards");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Suit",
                        "Value"});
            table1.AddRow(new string[] {
                        "Clubs",
                        "Two"});
            table1.AddRow(new string[] {
                        "Clubs",
                        "Three"});
            table1.AddRow(new string[] {
                        "Clubs",
                        "Four"});
#line 16
 testRunner.Then("the last \"3\" cards taken should be equal to:", ((string)(null)), table1);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Shuffle the deck")]
        public virtual void ShuffleTheDeck()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Shuffle the deck", ((string[])(null)));
#line 22
this.ScenarioSetup(scenarioInfo);
#line 23
 testRunner.Given("I have a new deck of 52 cards");
#line 24
 testRunner.And("I have taken the first card");
#line 25
 testRunner.And("that the card is a \"Ace\" of \"Clubs\"");
#line 26
 testRunner.And("I have shuffled the deck");
#line 27
 testRunner.When("I take \"3\" cards");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Suit",
                        "Value"});
            table2.AddRow(new string[] {
                        "Clubs",
                        "Two"});
            table2.AddRow(new string[] {
                        "Clubs",
                        "Three"});
            table2.AddRow(new string[] {
                        "Clubs",
                        "Four"});
#line 28
 testRunner.Then("the last \"3\" cards taken should not be equal to:", ((string)(null)), table2);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("check for 52 different cards")]
        public virtual void CheckFor52DifferentCards()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("check for 52 different cards", ((string[])(null)));
#line 34
this.ScenarioSetup(scenarioInfo);
#line 35
 testRunner.Given("I have a new deck of 52 cards");
#line 36
 testRunner.When("I take \"52\" cards");
#line 37
 testRunner.Then("I should have 52 unique cards");
#line 38
 testRunner.And("an empty deck");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
