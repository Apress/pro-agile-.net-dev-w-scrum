// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.5.0.0
//      Runtime Version:4.0.30319.225
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace KojackGames.Blackjack.Acceptance.Tests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.5.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Stand")]
    public partial class StandFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "004-StickHand.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Stand", "In order to avoid going bust\r\nAs a player\r\nI should be able to stand (keep your e" +
                    "xisting hand as it is) for each hand in turn", GenerationTargetLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Option to stick")]
        public virtual void OptionToStick()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Option to stick", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Email",
                        "Name",
                        "Password"});
            table1.AddRow(new string[] {
                        "Scott@elbandit.co.uk",
                        "Scott",
                        "Cheese@123"});
#line 7
 testRunner.Given("that I have logged in with an account with the following details", ((string)(null)), table1);
#line 10
 testRunner.And("I have started a new game and bet \"5\"");
#line 11
 testRunner.And("the dealers has dealt me in");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Suit",
                        "Value"});
            table2.AddRow(new string[] {
                        "Hearts",
                        "Two"});
            table2.AddRow(new string[] {
                        "Clubs",
                        "Six"});
#line 12
 testRunner.And("my hand contains the following cards:", ((string)(null)), table2);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Suit",
                        "Value"});
            table3.AddRow(new string[] {
                        "Hearts",
                        "Ten"});
            table3.AddRow(new string[] {
                        "Hearts",
                        "Three"});
#line 16
 testRunner.And("the dealers hand contains the following cards:", ((string)(null)), table3);
#line 20
    testRunner.When("I navigate to the game play screen");
#line 21
 testRunner.Then("I should given the option to stick");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
